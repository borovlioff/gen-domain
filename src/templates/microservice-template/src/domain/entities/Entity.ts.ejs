export class <%= entity %> {
  <% fields.forEach(field => { %>
  public <%= field.name %>: <%= toTsType(field.type) %>;
  <% }) %>

  constructor(
    <% fields.forEach((field, index) => { %>
    <%= field.name %>: <%= toTsType(field.type) %><%= index < fields.length - 1 ? ',' : '' %>
    <% }) %>
  ) {
    <% fields.forEach(field => { %>
    this.<%= field.name %> = <%= field.name %>;
    <% }) %>
  }

  // Безопасное обновление полей
  public updateProps(updates: Partial<Omit<<%= entity %>, 'id'>>) {
    Object.assign(this, updates);
  }
}

<% function toTsType(type) {
  // Обработка массива: array<тип>
  if (type.startsWith('array<') && type.endsWith('>')) {
    const innerType = type.slice(6, -1);
    return `${toTsType(innerType)}[]`;
  }

  switch(type) {
    case 'string': return 'string';
    case 'number': return 'number';
    case 'boolean': return 'boolean';
    case 'date': return 'Date';
    case 'object': return 'Record<string, any>';
    default:
      // Предполагаем, что это имя вложенной сущности (класса)
      return type;
  }
} %>
